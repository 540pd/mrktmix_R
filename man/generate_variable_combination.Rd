% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/apl_transformation.R
\name{generate_variable_combination}
\alias{generate_variable_combination}
\title{Generate Variable Combinations with Adstock, Power, and Lag}
\usage{
generate_variable_combination(variables_wt_apl_constraints)
}
\arguments{
\item{variables_wt_apl_constraints}{A list containing named lists for each variable.
Each named list for a variable should include the following components:
\describe{
\item{adstock}{A named numeric vector specifying the start, end, and step
for adstock, with names "start", "end", "step".}
\item{power}{A named numeric vector specifying the start, end, and step for
power, with names "start", "end", "step".}
\item{lag}{A named numeric vector specifying the start, end, and step for
lag, with names "start", "end", "step".}
\item{constraints}{An optional character string specifying additional
constraints between adstock and power.}
}}
}
\value{
A list where each element represents a combination of adstock, power,
and lag parameters for a given variable. If multiple variables are
provided, the function returns a list of lists, with each inner list
containing combinations for a specific variable.
}
\description{
This function generates combinations of adstock, power, and lag for multiple
variables based on specified constraints. It is designed to handle a variety
of marketing variables, each with its own set of transformation parameters and constraints.
}
\examples{
\dontrun{
  variables_wt_apl_constraints <- list(
    TV = list(
      adstock = setNames(c(.1, .3, .1), c("start", "end", "step")),
      power = setNames(c(.2, .5, .1), c("start", "end", "step")),
      lag = setNames(c(0, 2, 1), c("start", "end", "step")),
      constraints = "adstock <= power"
    ),
    Radio = list(
      adstock = setNames(c(.2, .5, .1), c("start", "end", "step")),
      power = setNames(c(.4, .7, .1), c("start", "end", "step")),
      lag = setNames(c(0, 0, 1), c("start", "end", "step")),
      constraints = "adstock <= power"
    )
  )
  variable_combinations <- generate_variable_combination(variables_wt_apl_constraints)
  print(variable_combinations)
}

}
