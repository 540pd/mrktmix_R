% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/other_transformation.R
\name{generate_model_dependent}
\alias{generate_model_dependent}
\title{Generate Model-Dependent Data Frames with APL Transformations}
\usage{
generate_model_dependent(
  var_info,
  model_df,
  apl_delimiter = "_",
  delimiter = "\\\\|"
)
}
\arguments{
\item{var_info}{A named numeric vector or a list detailing the variables and
their respective APL transformations.}

\item{model_df}{A data frame containing model variables to which the APL
transformations are to be applied.}

\item{apl_delimiter}{A string delimiter for concatenating variable names with
their APL attributes when \code{var_info} is a named numeric vector. Default "_".}

\item{delimiter}{A string delimiter for separating variable names from their
APL attributes when \code{var_info} is a named numeric vector. Default "\\|".}
}
\value{
A list containing a tibble of APL information and a list of data
frames with APL transformations applied.
}
\description{
Applies Adstock-Power-Lag (APL) transformations to variable information within
a model data frame. The function returns a list containing APL information
and a list of data frames with applied transformations. The \code{apl_delimiter}
and \code{delimiter} are used to interpret and construct variable names when
\code{var_info} is a named numeric vector. When \code{var_info} is a list, the function
generates variable combinations and applies APL to \code{model_df}.
}
\examples{
\dontrun{
  # Named vector input
  var_info_vec <- setNames(5, "TV|0.8_0.22_0")
  result_vec <- generate_model_dependent(var_info_vec, model_df)

  # List input with APL specifications
  var_info_list <- list(
    TV = list(
      adstock = setNames(c(.1, .2, .1), c("start", "end", "step")),
      power = setNames(c(.2, .3, .1), c("start", "end", "step")),
      lag = setNames(c(0, 1, 1), c("start", "end", "step")),
      constraints = "adstock <= power"
    )
  )
  result_list <- generate_model_dependent(var_info_list, model_df)
}
}
